#!/bin/sh

line="DATE `date '+%Y-%m-%d %H:%M:%S %Z%z'`"
echo -n "$line"
if [ ${#line} -lt 40 ]; then
	tab=""
	for i in `seq ${#line} 40`; do
		tab="$tab "
	done
fi
echo -n "$tab"
echo "HOST `hostname -f`"

if which stat-gpg >/dev/null 2>&1 ; then
	stat-gpg
fi

case `uname -s` in
	Darwin)
		line=`uname -r -s`
		echo "$line"
	;;
	FreeBSD)
		line=`uname -i -p -r -s | tr -d '\n'`
		echo -n "$line"
		if [ ${#line} -lt 45 ]; then
			tab=""
			for i in `seq ${#line} 45`; do
				tab="$tab "
			done
		fi
		echo -n "$tab"
		freebsd-version
	;;
esac

if which ssh-finger >/dev/null 2>&1 ; then
	RSA="`ssh-finger`"
	if [ -n "$RSA" ]; then
		echo "RSA  $RSA"
	fi
fi

if which ssh-finger-dsa >/dev/null 2>&1 ; then
	DSA="`ssh-finger-dsa`"
	if [ -n "$DSA" ]; then
		echo "DSA  $DSA"
	fi
fi

case `uname -s` in
	FreeBSD)
		if which ssh-finger-ecdsa >/dev/null 2>&1 ; then
			ECD="`ssh-finger-ecdsa`"
			if [ -n "$ECD" ]; then
				echo "ECD  $ECD"
			fi
		fi
		if which ssh-finger-ed25519 >/dev/null 2>&1 ; then
			ED2="`ssh-finger-ed25519`"
			if [ -n "$ED2" ]; then
				echo "ED2  $ED2"
			fi
		fi
	;;
esac

tablestat() {

if which stat-cpu >/dev/null 2>&1 ; then
	line="CPU  `stat-cpu`"
	echo -n "$line"
	if [ ${#line} -lt 6 ]; then
		tab=". . . "
	fi
fi

if which stat-temperature >/dev/null 2>&1 ; then
	echo -n "$tab"
	echo ". HEAT `stat-temperature`"
fi

if which stat-ram >/dev/null 2>&1 ; then
	line="RAM  `stat-ram`"
	echo -n "$line"
	if [ ${#line} -lt 6 ]; then
		tab=". . . . "
	fi
fi

if which stat-up >/dev/null 2>&1 ; then
	echo -n "$tab"
	echo "UPT  `stat-up`"
fi

if which stat-disk >/dev/null 2>&1 ; then
	line="HDD  `stat-disk`"
	echo -n "$line"
	if [ ${#line} -lt 6 ]; then
		tab=". . . "
	fi
fi

if which stat-usr >/dev/null 2>&1 ; then
	echo -n "$tab"
	echo ". USR  `stat-usr`"
fi

if which stat-swap >/dev/null 2>&1 ; then
	line="SWAP `stat-swap`"
	echo -n "$line"
	if [ ${#line} -lt 6 ]; then
		tab=". . . "
	fi
fi

if which stat-who >/dev/null 2>&1 ; then
	echo -n "$tab"
	echo ". WHO  `stat-who`"
fi

}

tablestat | column -t

if which stat-zfs >/dev/null 2>&1 ; then
	# to keep output spacing
	oldifs=$IFS
	IFS=;
	count=0
	stat-zfs | while read line; do
		count=$(( count + 1 ))
		if [ $count -eq 1 ]; then
			echo -n "ZFS "
		else
			echo -n "    "
		fi
		echo "$line"
	done
	IFS=$oldifs
fi

if which stat-ucarp >/dev/null 2>&1 ; then
	count=0
	stat-ucarp | while read line; do
		count=$(( count + 1 ))
		if [ $count -eq 1 ]; then
			echo -n "CARP  "
		else
			echo -n "      "
		fi
		echo "$line"
	done
fi

if which stat-net >/dev/null 2>&1 ; then
	count=0
	stat-net | while read line; do
		count=$(( count + 1 ))
		if [ $count -eq 1 ]; then
			echo -n "NET  "
		else
			echo -n "     "
		fi
		echo "$line"
	done
fi

if which stat-dhcpd >/dev/null 2>&1 ; then
	count=0
	stat-dhcpd | while read line; do
		count=$(( count + 1 ))
		if [ $count -eq 1 ]; then
			echo -n "DHCP  "
		else
			echo -n "      "
		fi
		echo "$line"
	done
fi

if which stat-jail >/dev/null 2>&1 ; then
	count=0
	stat-jail | while read line; do
		count=$(( count + 1 ))
		if [ $count -eq 1 ]; then
			echo -n "JAIL  "
		else
			echo -n "      "
		fi
		echo "$line"
	done
fi

if which netconn >/dev/null 2>&1 ; then
	count=0
	netconn \
	| sed 's;ADDRESS;;g' | awk '{$4="";print}' \
	| grep -v '^_ntp *ntpd.*:123$' \
	| grep -v '^root *sendmail.*127.0.0.1:25' \
	| grep -v '^root *syslogd.*127.0.0.1:514' \
	| grep -v '^root *sshd.*\*:22' \
	| grep -v '^root *ucarp.*udp4 *\*:\* *\*:\*\s*$' \
	| column -t \
	| while read line; do
		count=$(( count + 1 ))
		if [ $count -eq 1 ]; then
			echo -n "CON  "
		else
			echo -n "     "
		fi
		echo "$line"
	done
fi
